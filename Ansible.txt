YAML
List : 
(-mango
-banana)
(FOODS:
-egg
-pizza)

Dictonary :
['mango','banana']
{'FOODS':['egg','-pizza']}

Ansible is Infrastructure as a tool 
Written In Python 
AgentLess as compared to other tools

Uses Playbooks
Playbooks consists of 
-> Tasks and Roles
Tasks
-> Series of steps we write to defined to happen in system
Roles 
-> modulate version of tasks

order of priority for config files in ansible. If in multiple places cnfg file are present then Ansible takes it on priority bases.
{{
Ansible_Config
ansible.cfg (in current directory)	
.ansible.cfg (in home directory)
/etc/ansible/ansible.cfg
}}
host key checking is false by default
ssh timeout 
check this file /etc/ansible/ansible.cfg for more info 

Ansible Inventory
inventory : hosts to be connected 
written in INI format 
HOST VARIABLE : if one of the machine required a different username to ssh
GROUP VARIABLE :
GROUPS of Groups
inventory files series of hosts to be grouped
etc/ansible/hosts ( by default ) but we can change on run time as well
Host we can give in ungrouped manner, grouped manner, or in pattern


COMMANDS : 
ansible -m ping all
eval `ssh-agent -s`

ungrouped ex : 
1.1.1.1
exxample.com

grouped ex : 
[webservers]
1.1.1.1
example.com

pattern: 
www[001:006].example.com 

Commands :
ansible <target> -m <module name> -a arguments 
Parallelism <commands> -f ( use -f to run commands parrelel in ansible )
ansible-doc -l list all the variables avilable in ansible
  
Facts:
provide details of hosts.
ansible all-m setup (get all facts from all nodes in inventory)
ansible all-m setup -a 'arguments' (to filter the facts)

Variables:
define a variable file and use them in Inventory/PlayBooks/Files
valid variable names :	cannot use '-',Should be alphanumeric 
{{ variable_NAME }} 

Ansible can be use in AdHoc mode ( directly giving instructions ) or in playbook ( instructions from a file) 

PLAYBOOK:
ansible-playbook sample.yaml

Structure of Playbook : 
Target Section 
Variable Section
Task Section 
Handler 
Loops
Conditionals
Until 
Notify


PLAYBOOK EXAMPLE

---
- hosts: web_portal
  tasks:
    -name: Apt get Update
     apt: update_cache=yes
   (apt is a module) 	
    -name: Install Apache2, ngin ,tmux
     apt: name={{ item }} update_cache=no   
     with_items: (loop example)
	- apache2
	- nginx
	- tmux 
	
    -name: Copy Data files
     copy: src=path to file  dest= path to file

    -name: stop the service
     service : name=apache2 state=stopped
	
    -name: Copy Template file
     template: src=current.html.j2 dest=/var/www/html
     notify: Start apache

    -name: Check uptime
     shell: uptime
     register: uptime_var (for debugging)

    -name: Print Uptime
     debug: var=uptime_var		

    -name: testing conditional
     shell: uptime
     when: ansible_hostname=node02 (conditional) 		

    -name: testing untill
     shell: service apache2 status
     register: result
     until: result.stdout.find(("active(running)") != -1
     retries: 5
     delay: 5		

handlers:
    - name: Start apache
      service: name=apache2 state=restarted




ansible-playbook playbook_name.yml [-b(for sudo permissions)]
ansible-playbook playbook_name.yml [-b --check(for dry run)]
man ansible_playbook
ansible-doc -l | grep service
by default service do not start
template module (jinger file)
Handlers(list of task,global unique name) run only once in the end completing of all the tasks and was notified using notifiers
ansible_hostname
dryrun (run task in simulation mode) (--check option)
until - run a task till until condition (similar to do_while loop)



Ansible Vault - store sensitive information,
#Ansible roles - reusability,modularity,encapulate  
Ansible galay -
Tag : tag a task
we can start from 3rd or 4th task as well.

Ansible Vault : 
create a vault : ansible-vault create foo.yml
view  vault: ansible-vault view foo.yml
use in playbook : ansible-playbook site.yml --ask-vault-pass (will ask for password)
(How to update the vault file???)


ansible modules:
setup Module : gather facts from  host machine
(ansible host -m setup)
file module : file operations creations,symbolic link recursive copy etc
find more at ansible-doc file
yum module : red hat based os systems u use yum. similar to apt module
apt module,
service module,
copy module,shell module
user module : ansible-doc user. used to manage users.
ansible node01 -m user -a "user=tetracloud" -b  to create a new user
command module : ansible-doc commands. can be used to run shell commands


Roles : similar to project in other languages,Given presedence ( run roles before other tasks.) 
pre_tasks :  run tasks before roles
post_tasks :  run tasks after roles
to create a new role eecute : ansible playbook initrole newroleName



